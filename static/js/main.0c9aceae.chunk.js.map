{"version":3,"sources":["Display.tsx","ButtonPlus.tsx","Counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","props","alert","color","count","max","className","disable","style","error","ButtonPlus","disabled","disableBtn","changeStatus","onClick","changeCount","title","Counter","display","htmlFor","value","min","onChange","e","onDisable","changeMin","currentTarget","valueAsNumber","type","changeMax","inc","button","changeInc","disableIncReset","incPlus","App","useState","setMin","setMax","setInc","setDisable","setDisableBtn","setDisableIncReset","setError","offDisable","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0c9aceae.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\ntype DisplayPropsType = {\r\n    count?: number\r\n    error: string\r\n    max: number\r\n    disable?: boolean\r\n\r\n}\r\n\r\nexport const Display = (props: DisplayPropsType) => {\r\n\r\n    const alert = {\r\n        color: props.count === props.max ? \"red\" : \"black\"\r\n\r\n    }\r\n    const color = {\r\n        color:  \"red\"\r\n    }\r\n\r\n    return <div className={\"field\"}>\r\n\r\n        {props.disable\r\n            ?\r\n            <div style={color} className={\"display\"  }>\r\n\r\n                {props.error}\r\n\r\n            </div>\r\n            :\r\n            <div className={\"display\"} style={alert}>{props.count}</div>}\r\n\r\n    </div>\r\n\r\n}","import React from \"react\";\r\n\r\ntype ButtonPlusPropsType = {\r\n    changeCount?: () => void\r\n    changeStatus?: string\r\n    title: string\r\n    disableBtn:boolean\r\n}\r\n\r\n\r\nexport const ButtonPlus = (props: ButtonPlusPropsType) => {\r\n\r\n\r\n    return <button disabled={props.disableBtn} className={props.changeStatus} onClick={props.changeCount}>{props.title}</button>\r\n}","import {Display} from \"./Display\";\r\nimport {ButtonPlus} from \"./ButtonPlus\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype CounterPropsType = {\r\n    onDisable: () => void\r\n    offDisable: () => void\r\n    display: boolean\r\n    button: boolean\r\n    min: number\r\n    max: number\r\n    changeMax: (value: number) => void\r\n    changeMin: (value: number) => void\r\n    inc?: number\r\n    changeInc: () => void\r\n    disable: boolean\r\n    incPlus: () => void\r\n    error: string\r\n    disableBtn: boolean\r\n    disableIncReset: boolean\r\n\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    const changeMin = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onDisable()\r\n        props.changeMin(e.currentTarget.valueAsNumber)\r\n    }\r\n    const changeMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onDisable()\r\n        props.changeMax(e.currentTarget.valueAsNumber)\r\n    }\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            {props.display ?\r\n                <div className={\"form\"}>\r\n                    <div>\r\n                        <label htmlFor=\"\">min value: </label>\r\n                        <input value={props.min} onChange={changeMin} type=\"number\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"\">max value: </label>\r\n                        <input value={props.max} onChange={changeMax} type=\"number\"/>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <Display\r\n\r\n                    disable={props.disable}\r\n                    max={props.max}\r\n                    error={props.error}\r\n                    count={props.inc}/>}\r\n            <div>\r\n                {props.button ?\r\n                    <div className={\"btnArea\"}>\r\n                        < ButtonPlus\r\n                            disableBtn={props.disableBtn}\r\n                            title={\"set\"}\r\n                            changeStatus={\"\"}\r\n                            changeCount={props.changeInc}/>\r\n                    </div>\r\n\r\n                    :\r\n                    <div className={\"btnArea\"}>\r\n                        < ButtonPlus\r\n\r\n                            changeStatus={props.inc === props.max ? \"set_disable\" : \"\"}\r\n                            disableBtn={props.disableIncReset}\r\n                            title={\"inc\"}\r\n                            changeCount={props.incPlus}/>\r\n\r\n                        <ButtonPlus\r\n                            changeStatus={props.inc === props.min ? \"set_disable\" : \"\"}\r\n                            disableBtn={props.disableIncReset}\r\n                            title={\"reset\"}\r\n                            changeCount={props.changeInc}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\nimport './App.scss';\nimport {Counter} from \"./Counter\";\n\n\nfunction App() {\n\n    const [min, setMin] = useState<number>(0)\n    const [max, setMax] = useState<number>(0)\n    const [inc, setInc] = useState<number>(0)\n    const [disable, setDisable] = useState<boolean>(true)\n    const [disableBtn, setDisableBtn] = useState<boolean>(true)\n    const [disableIncReset, setDisableIncReset] = useState<boolean>(true)\n    const [color, setColor] = useState<boolean>(true)\n    const [error, setError] = useState<string>(\"Enter value and click 'set'\")\n    const onDisable = () => setDisable(true)\n    const offDisable = () => setDisable(false)\n    const changeMin = (value: number) => {\n        if (value > max) {\n            setDisableIncReset(true)\n            setDisableBtn(true)\n            setError(\"min не может быть больше max\")\n            setMin(value)\n        } else if (value < 0) {\n            setDisableBtn(true)\n            setError(\"min не может быть меньше 0\")\n            setMin(value)\n        } else if (value === max) {\n            setDisableBtn(true)\n            setError(\"min не может быть равен max\")\n            setMin(value)\n        } else {\n            setDisableIncReset(true)\n            setDisableBtn(false)\n            setError(\"Click 'set'\")\n            setMin(value)\n        }\n    }\n    const changeMax = (value: number) => {\n        if (value < min) {\n            setDisableBtn(true)\n            setError(\"max не может быть меньше min\")\n            setMax(value)\n        } else if (value < 0) {\n            setDisableBtn(true)\n            setError(\"max не может быть меньше 0\")\n            setMax(value)\n        } else if (value === min) {\n            setDisableBtn(true)\n            setError(\"max не может быть равен min\")\n            setMax(value)\n        } else {\n            setDisableIncReset(true)\n            setDisableBtn(false)\n            setError(\"Click 'set'\")\n            setMax(value)\n        }\n    }\n    const incPlus = () => {\n        if (inc === max) {\n        } else {\n            setInc(inc + 1)\n        }\n    }\n    const changeInc = () => {\n        offDisable()\n        setInc(min)\n        setDisableIncReset(false)\n    }\n\n    return (\n        <div className={\"wrapper\"}>\n\n            <Counter\n                disableIncReset={disableIncReset}\n                disableBtn={disableBtn}\n                error={error}\n                incPlus={incPlus}\n                onDisable={onDisable}\n                offDisable={offDisable}\n                disable={disable}\n                changeInc={changeInc}\n                changeMin={changeMin}\n                changeMax={changeMax}\n                min={min}\n                max={max}\n                display={true}\n                button={true}\n            />\n            <Counter\n                disableIncReset={disableIncReset}\n                disableBtn={disableBtn}\n                error={error}\n                incPlus={incPlus}\n                onDisable={onDisable}\n                offDisable={offDisable}\n                disable={disable}\n                inc={inc}\n                changeInc={changeInc}\n                changeMin={changeMin}\n                changeMax={changeMax}\n                min={min}\n                max={max}\n                display={false}\n                button={false}\n            />\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}